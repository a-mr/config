
(setq inhibit-splash-screen t)

(setq save-place-file "~/.emacs.d/saveplace") ;; keep my ~/ clean
(setq-default save-place t)                   ;; activate it for all buffers
(require 'saveplace)                          ;; get the package

(define-key global-map [f9] 'bookmark-jump)
(define-key global-map [f8] 'bookmark-set)

(normal-erase-is-backspace-mode 0)

(mouse-wheel-mode t)
(setq-default indent-tabs-mode nil)
(global-font-lock-mode t)
(defun add-load-path (path)
  (add-to-list 'load-path (expand-file-name path)))

(defun add-hook-list (hook hooks-list)
  "Add list of hooks"
    (mapcar (lambda (one-hook) (add-hook hook one-hook)) hooks-list))


;;;;;;;;;;;;;;;;; prolog/mercury ;;;;;;;;;;;;;;;;;;;;;;;

(add-to-list 'load-path
            "/home/makarov/software/usr/lib/mercury/elisp")
(autoload 'mdb "gud" "Invoke the Mercury debugger" t)

;; (setq load-path (cons "/usr/lib/xemacs/site-lisp" load-path))
(autoload 'run-prolog "prolog" "Start a Prolog sub-process." t)
(autoload 'prolog-mode "prolog" "Major mode for editing Prolog programs." t)
(autoload 'mercury-mode "prolog" "Major mode for editing Mercury programs."
 t)
(setq prolog-system 'swi)  ; optional, the system you are using;
                           ; see `prolog-system' below for possible values
(setq auto-mode-alist (append '(("\\.pl$" . prolog-mode)
                                ("\\.m$" . mercury-mode))
                                auto-mode-alist))

;;;;;;;;;;;;;;;;;;;;;; haskell ;;;;;;;;;;;;;;;;;;;;;
;;
;;(add-to-list 'load-path "~/opt/haskell-mode")
;;
;;; try to load GHC-mod
;;(let ((pathes (file-expand-wildcards "~/.cabal/share/ghc-mod-*")))
;;  (if (> (length pathes) 1)
;;    (error "Multiple ghc-mods. Do something!!!")
;;    (mapcar 'add-load-path pathes)))
;;
;;(setq auto-mode-alist (cons '("\\.hs"  . haskell-mode) auto-mode-alist))
;;(setq auto-mode-alist (cons '("\\.hsc" . haskell-mode) auto-mode-alist))
;;

;;(require 'haskell-mode)
;;(require 'haskell-cabal)
;;(require 'haskell-move-nested)
;;(require 'haskell-navigate-imports)
;;(require 'haskell-sort-imports)
;;(custom-set-variables
;;     '(haskell-mode-hook '(turn-on-haskell-indentation)))

;;(autoload 'ghc-init "ghc" nil t)
;;(defun my-haskell-hooks ()
;;  "Hooks specific to haskell"
;;  (abbrev-mode t)
;;  (turn-on-haskell-indentation)
;;  ;; Move nested blocks
;;  (define-key haskell-mode-map (kbd "M-<left>")
;;    (lambda ()
;;      (interactive)
;;      (haskell-move-nested -1)))
;;  (define-key haskell-mode-map (kbd "M-<right>")
;;    (lambda ()
;;      (interactive)
;;      (haskell-move-nested  1)))
;;  ;; Navigate imports
;;  (local-set-key (kbd "M-[") 'haskell-navigate-imports)
;;  (local-set-key (kbd "M-]") 'haskell-navigate-imports-return)
;;  ;; PRAGMAS
;;  (local-set-key (kbd "C-c C-s") 'haskell-mode-insert-scc-at-point)
;;  (local-set-key (kbd "C-c s"  ) 'haskell-mode-kill-scc-at-point)
;;  (local-set-key (kbd "C-c i"  ) 'my-haskell-insert-inline)
;;  ;; ghc-mod
;;  (ghc-init)
;;  (flymake-mode)
;;  )
;;
;;(add-hook-list 'haskell-mode-hook    '(my-comment-hooks
;;				       my-haskell-hooks))
;;
;;
;;;;;;;;;;;;;;;;;;;;;;;;;; Ocaml ;;;;;;;;;;;;;;;;;;;;;;;;;
;; OCaml (tuareg) editing mode
(add-to-list 'load-path "~/.opam/4.00.1/share/typerex/ocp-edit-mode/emacs")
;;(add-to-list 'load-path "~/software/tuareg-mode")
(add-to-list 'auto-mode-alist '("\\.ml[iylp]?" . tuareg-mode))
(autoload 'tuareg-mode "tuareg" "Major mode for editing Caml code" t)
(autoload 'camldebug "camldebug" "Run the Caml debugger" t)
(dolist (ext '(".cmo" ".cmx" ".cma" ".cmxa" ".cmi"))
  (add-to-list 'completion-ignored-extensions ext))

(custom-set-variables
  ;; custom-set-variables was added by Custom -- don't edit or cut/paste it!
  ;; Your init file should contain only one such instance.
 '(tuareg-default-indent 4)
 '(tuareg-fun-indent 0)
 '(tuareg-in-indent nil)
 '(tuareg-let-always-indent nil)
 '(tuareg-library-path "~/software/GODI"))
(custom-set-faces
  ;; custom-set-faces was added by Custom -- don't edit or cut/paste it!
  ;; Your init file should contain only one such instance.
 )

(add-hook 'tuareg-mode-hook
 '(lambda ()
             (setq tuareg-lazy-= t)
                                        ; indent `=' like a standard keyword
             (setq tuareg-lazy-paren t)
                                        ; indent [({ like standard keywords
             (setq tuareg-in-indent 0)
                                        ; no indentation after `in' keywords
             (auto-fill-mode 1)
                                        ; turn on auto-fill minor mode
             (if (featurep 'sym-lock)   ; Sym-Lock customization only
                 (setq sym-lock-mouse-face-enabled nil))
                                        ; turn off special face under mouse
             (define-key tuareg-mode-map [f4] 'goto-line)
             (define-key tuareg-mode-map [f5] 'compile)
             (define-key tuareg-mode-map [f6] 'recompile)
             (define-key tuareg-mode-map [f7] 'next-error)
             (setq tuareg-sym-lock-keywords nil)
  ))



;;;; Tuareg (from conf sample)
;;
;;(add-to-list 'load-path "~/.emacs.d")
;;
;;(setq auto-mode-alist (cons '("\\.ml\\w?" . tuareg-mode) auto-mode-alist))
;;
;;(autoload 'tuareg-mode "tuareg" "Major mode for editing Caml code" t)
;;
;;(autoload 'camldebug "camldebug" "Run the Caml debugger" t)
;;
;; 
;;
;;(if (and (boundp 'window-system) window-system)
;;
;;    (when (string-match "XEmacs" emacs-version)
;;
;;      (if (not (and (boundp 'mule-x-win-initted) mule-x-win-initted))
;;
;;            (require 'sym-lock))
;;
;;      (require 'font-lock)))
;;
 


;; Scroll

 

 

;;display line/column
(column-number-mode t)
(line-number-mode t)
;;match parenthesis
(show-paren-mode t)

;;auto 80col

(setq-default fill-column 80)
(setq-default auto-fill-function 'do-auto-fill)

(global-set-key [M-left] 'windmove-left)          ; move to left windnow
(global-set-key [M-right] 'windmove-right)        ; move to right window
(global-set-key [M-up] 'windmove-up)              ; move to upper window
(global-set-key [M-down] 'windmove-down)          ; move to downer window

;(with-temp-buffer (insert (shell-command-to-string "ocp-edit-mode emacs -load-global-config")) (eval-buffer))
(setq pascal-indent-level       2)
(load-theme 'tango-dark)
